// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String  @id @default(uuid())
  name      String
  userId    String
  billboards Billboard[]  @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes      Size[] @relation("StoreToSize")
  colors     Color[] @relation("StoreToColor")
  products   Product[] @relation("StoreToProduct")
  provinces  Province[] @relation("StoreToProvince")
  type       Type[] @relation("StoreToType")
  sportsteams         Sportsteam[] @relation("StoreToSportsteam")
  cdays               Cday[] @relation("StoreTocday")
  orders     Order[] @relation("StoreToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  images    BillboardImage[]
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model BillboardImage {
  id String @id @default(uuid())

  billboardId String
  billboard Billboard @relation(fields:[billboardId], references: [id], onDelete: Cascade)

  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([billboardId])

}


model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])

  billboardId String
  billboard Billboard @relation(fields:[billboardId], references: [id])

  products   Product[] @relation("CategoryToProduct")

  nameEn String
  nameFr String
  nameSp String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])

}

model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields: [storeId], references: [id])
  products Product[]
  name String
  valueEn String
  valueFr String
  valueSp String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])


}

model Color {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor", fields: [storeId], references: [id])
  products Product[]
  name String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])

}

model Province {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProvince", fields: [storeId], references: [id])
  products Product[]
  name String
  valueEn String
  valueFr String
  valueSp String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])


}

model Type {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToType", fields: [storeId], references: [id])
  products Product[]
  name String
  valueEn String
  valueFr String
  valueSp String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])

}

model Sportsteam {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSportsteam", fields: [storeId], references: [id])
  products Product[]
  name String
  valueEn String
  valueFr String
  valueSp String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])


}

model Cday {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreTocday", fields: [storeId], references: [id])
  products Product[]
  name String
  valueEn String
  valueFr String
  valueSp String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])

}


model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])


  nameEn String
  nameFr String
  nameSp String

  descriptionEn String
  descriptionFr String
  descriptionSp String

  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])

  colorId String
  color Color @relation(fields: [colorId], references: [id])

  provinceId String
  province Province @relation(fields: [provinceId], references: [id])
  typeId String
  type Type @relation(fields: [typeId], references: [id])
  sportsteamId String
  sportsteam Sportsteam @relation(fields: [sportsteamId], references: [id])
  cdayId String
  cday Cday @relation(fields: [cdayId], references: [id])

  images ProductImage[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([provinceId])
  @@index([typeId])
  @@index([sportsteamId])
  @@index([cdayId])

}

model ProductImage {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])

}


model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
